{
  "http": {
    "store_memory": {
      "success": true,
      "response": {
        "success": true,
        "message": "Memory stored successfully",
        "resource_id": 152,
        "chunk_count": 1
      },
      "error": null
    },
    "retrieve_memory": {
      "success": true,
      "response": {
        "success": true,
        "context": "Integration test validation at 1754727185.0138457\n\nte CREATE TABLE statements** from service files\n2.**Standardize on main schema. py** as single source of truth\n3. **Add proper error handling** for schema mismatches\n4. **Add validation checks** before database operations\n\n## IMPLEMENTATION PRIORITY\n\n### P0 - CRITICAL (Implement immediately)\n- [ ] Fix CodePatterns table schema mismatch\n- [ ] Update main schema.\n\nns table schema mismatch\n- [ ] Update main schema.py file\n- [ ] Test all code pattern tools\n\n### P1 - HIGH (Next)\n- [ ] Implement database migration system\n- [ ] Add schema validation\n- [ ] Clean up duplicate schema definitions\n\n### P2 - MEDIUM (Follow-up)\n- [ ] Add database versioning\n- [ ] Implement automatic migration on startup\n- [ ] Add comprehensive schema tests\n\n## TESTING STRATEGY\n\n1. **Backup current database** before any changes\n2. **Test migration script** on copy first\n3.",
        "retrieved_chunks": [
          {
            "chunk_id": 56,
            "resource_id": 24,
            "file_name": "integration_test_1754727185.md",
            "score": 0.6713141209869571
          },
          {
            "chunk_id": 99,
            "resource_id": 39,
            "file_name": "database_fix_implementation_plan_20250809.md",
            "score": 0.6713141209869571
          },
          {
            "chunk_id": 100,
            "resource_id": 39,
            "file_name": "database_fix_implementation_plan_20250809.md",
            "score": 0.6713141209869571
          }
        ]
      },
      "error": null
    },
    "log_chat": {
      "success": true,
      "response": {
        "success": true,
        "message_id": 2079
      },
      "error": null
    },
    "ask_with_context": {
      "success": true,
      "response": {
        "success": true,
        "query": "What is stored in memory?",
        "conversation_id": "test_session_1754754756",
        "context": "Title: mcp_2024_11_05_test_results_20250809_141752.json\nContent: \"created_at\": \"2025-08-09T14:17:52.560506\",\n                \"vector_id\": 203\n              },\n              {\n                \"id\": 15,\n                \"function_name\": null,\n                \"file_name\": null,\n                \"module_name\": null,\n                \"input_prompt\": \"Update studio-producer agent with mandatory LTMC integration requirements\",\n                \"generated_code\": \"Added comprehensive LTMC usage requirements including team coordination patterns, process improvement tracking, and resource management with copy-paste ready commands\",\n                \"result\": \"pass\",\n                \"execution_time_ms\": null,\n                \"error_message\": null,\n                \"tags\": [\n                  \"agent-config\",\n                  \"ltmc-integration\",\n                  \"studio-producer\"\n                ],\n                \"created_at\": \"2025-08-09T12:03:12.\n\nTitle: mcp_2024_11_05_test_results_20250809_141907.json\nContent: liance_score\": 1. 0,\n      \"performance_score\": 0.998110294342041,\n      \"reliability_score\": 1. 0,\n      \"http_result\": {\n        \"tool_name\": \"get_code_patterns\",\n        \"transport\": \"http\",\n        \"success\": true,\n        \"duration\": 0. 018897056579589844,\n        \"response_time\": 0. 018863439559936523,\n        \"response\": {\n          \"jsonrpc\": \"2.\n\nTitle: mcp_server_testing_results_$(date +%Y%m%d_%H%M%S).md\nContent: MCP SERVER TESTING COMPLETE: Comprehensive testing of all 10 MCP servers completed. Results: 4/10 servers working (40% success rate). LTMC and context7 are production-ready. Main issues: missing Python MCP server modules. Sequential-thinking and GitHub servers have partial functionality. Need to install missing dependencies and fix startup commands for full functionality.",
        "context_summary": "Found 3 relevant documents:\n1. mcp_2024_11_05_test_results_20250809_141752.json (test_results, score: 0.71)\n2. mcp_2024_11_05_test_results_20250809_141907.json (test_results, score: 0.70)\n3. mcp_server_testing_results_$(date +%Y%m%d_%H%M%S).md (document, score: 0.70)",
        "answer": "Based on the available context:\n\nFound 3 relevant documents:\n1. mcp_2024_11_05_test_results_20250809_141752.json (test_results, score: 0.71)\n2. mcp_2024_11_05_test_results_20250809_141907.json (test_results, score: 0.70)\n3. mcp_server_testing_results_$(date +%Y%m%d_%H%M%S).md (document, score: 0.70)\n\nThis is a fallback response. Set OPENAI_API_KEY environment variable for full LLM integration.",
        "documents_used": 3,
        "top_documents": [
          {
            "id": "chunk-327",
            "title": "mcp_2024_11_05_test_results_20250809_141752.json",
            "content": "\"created_at\": \"2025-08-09T14:17:52.560506\",\n                \"vector_id\": 203\n              },\n              {\n                \"id\": 15,\n                \"function_name\": null,\n                \"file_name\": null,\n                \"module_name\": null,\n                \"input_prompt\": \"Update studio-producer agent with mandatory LTMC integration requirements\",\n                \"generated_code\": \"Added comprehensive LTMC usage requirements including team coordination patterns, process improvement tracking, and resource management with copy-paste ready commands\",\n                \"result\": \"pass\",\n                \"execution_time_ms\": null,\n                \"error_message\": null,\n                \"tags\": [\n                  \"agent-config\",\n                  \"ltmc-integration\",\n                  \"studio-producer\"\n                ],\n                \"created_at\": \"2025-08-09T12:03:12.",
            "type": "test_results",
            "created_at": "2025-08-09T14:17:52.585530",
            "metadata": {
              "source": "faiss",
              "similarity": 0.5055450286507485,
              "recency": 1.0,
              "weights": {
                "alpha": 1.0,
                "beta": 0.2,
                "gamma": 0.1,
                "delta": 0.05,
                "epsilon": 0.1
              }
            },
            "score": 0.7055450286507485
          },
          {
            "id": "chunk-507",
            "title": "mcp_2024_11_05_test_results_20250809_141907.json",
            "content": "liance_score\": 1. 0,\n      \"performance_score\": 0.998110294342041,\n      \"reliability_score\": 1. 0,\n      \"http_result\": {\n        \"tool_name\": \"get_code_patterns\",\n        \"transport\": \"http\",\n        \"success\": true,\n        \"duration\": 0. 018897056579589844,\n        \"response_time\": 0. 018863439559936523,\n        \"response\": {\n          \"jsonrpc\": \"2.",
            "type": "test_results",
            "created_at": "2025-08-09T14:19:07.157311",
            "metadata": {
              "source": "faiss",
              "similarity": 0.49872663889505214,
              "recency": 1.0,
              "weights": {
                "alpha": 1.0,
                "beta": 0.2,
                "gamma": 0.1,
                "delta": 0.05,
                "epsilon": 0.1
              }
            },
            "score": 0.6987266388950522
          },
          {
            "id": "chunk-572",
            "title": "mcp_server_testing_results_$(date +%Y%m%d_%H%M%S).md",
            "content": "MCP SERVER TESTING COMPLETE: Comprehensive testing of all 10 MCP servers completed. Results: 4/10 servers working (40% success rate). LTMC and context7 are production-ready. Main issues: missing Python MCP server modules. Sequential-thinking and GitHub servers have partial functionality. Need to install missing dependencies and fix startup commands for full functionality.",
            "type": "document",
            "created_at": "2025-08-09T14:41:15.190478",
            "metadata": {
              "source": "faiss",
              "similarity": 0.4985133635636677,
              "recency": 1.0,
              "weights": {
                "alpha": 1.0,
                "beta": 0.2,
                "gamma": 0.1,
                "delta": 0.05,
                "epsilon": 0.1
              }
            },
            "score": 0.6985133635636678
          }
        ]
      },
      "error": null
    },
    "route_query": {
      "success": true,
      "response": {
        "success": true,
        "query": "test routing query",
        "source_types": [
          "document",
          "code"
        ],
        "combined_answer": "=== DOCUMENT ===\nFound 5 relevant documents:\n1. ltmc_mcp_session_complete_$(date +%Y%m%d_%H%M%S).md (document, score: 0.69)\n2. integration_test_1754727185.md (document, score: 0.68)\n3. database_fix_implementation_plan_20250809.md (document, score: 0.68)\nBased on the available document context:\n\nFound 5 relevant documents:\n1. ltmc_mcp_session_complete_$(date +%Y%m%d_%H%M%S).md (document, score: 0.69)\n2. integration_test_1754727185.md (document, score: 0.68)\n3. database_fix_implementation_plan_20250809.md (document, score: 0.68)\n\nThis is a fallback response. Set OPENAI_API_KEY environment variable for full LLM integration.",
        "total_documents": 5,
        "results_by_source": {
          "document": {
            "success": true,
            "query": "test routing query",
            "doc_type": "document",
            "context": "",
            "context_summary": "Found 5 relevant documents:\n1. ltmc_mcp_session_complete_$(date +%Y%m%d_%H%M%S).md (document, score: 0.69)\n2. integration_test_1754727185.md (document, score: 0.68)\n3. database_fix_implementation_plan_20250809.md (document, score: 0.68)",
            "answer": "Based on the available document context:\n\nFound 5 relevant documents:\n1. ltmc_mcp_session_complete_$(date +%Y%m%d_%H%M%S).md (document, score: 0.69)\n2. integration_test_1754727185.md (document, score: 0.68)\n3. database_fix_implementation_plan_20250809.md (document, score: 0.68)\n\nThis is a fallback response. Set OPENAI_API_KEY environment variable for full LLM integration.",
            "documents_used": 5,
            "top_documents": [
              {
                "id": "chunk-588",
                "title": "ltmc_mcp_session_complete_$(date +%Y%m%d_%H%M%S).md",
                "content": "ixed MCP server type references (stdio vs HTTP)\n5.Removed problematic servers, optimized configuration\n\n\ud83d\udd27 TECHNICAL IMPLEMENTATIONS:\n- Created systematic testing frameworks for LTMC\n- Implemented MCP 2024-11-05 protocol compliance\n- Fixed stdio transport timeout issues (HTTP working)\n- Added enforcement patterns for MCP server usage\n- Established auto-execution for LTMC curl commands\n\n\ud83d\udccb FINAL CONFIGURATION:\n\u2705 Working MCP Servers (4 total):\n- sequential-thinking (stdio): Task breakdown\n- context7 (stdio): Best practices retrieval\n- github: Repository operations\n- ltmc (HTTP): Memory system with 28 tools\n\n\u2705 All 37 Agents Updated:\n- Mandatory LTMC usage patterns\n- Copy-paste ready commands\n- Verified server references only\n- Prohibition of broken servers\n\n\ud83c\udfc6 SYSTEM STATUS:\n- 100% agent compliance with LTMC integration\n- 100% working MCP server configuration\n- Production-ready memory and agent ecosystem\n- Complete chat continuity preservation\n\nThis session established a robust, reliable foundation for all Claude Code agents with comprehensive memory capabilities and verified MCP infrastructure.",
                "type": "document",
                "created_at": "2025-08-09T14:56:48.555644",
                "metadata": {
                  "source": "faiss",
                  "similarity": 0.48540095216867307,
                  "recency": 1.0,
                  "weights": {
                    "alpha": 1.0,
                    "beta": 0.2,
                    "gamma": 0.1,
                    "delta": 0.05,
                    "epsilon": 0.1
                  }
                },
                "score": 0.685400952168673
              },
              {
                "id": "chunk-56",
                "title": "integration_test_1754727185.md",
                "content": "Integration test validation at 1754727185.0138457",
                "type": "document",
                "created_at": "2025-08-09T10:13:05.015061",
                "metadata": {
                  "source": "faiss",
                  "similarity": 0.48241792329880934,
                  "recency": 1.0,
                  "weights": {
                    "alpha": 1.0,
                    "beta": 0.2,
                    "gamma": 0.1,
                    "delta": 0.05,
                    "epsilon": 0.1
                  }
                },
                "score": 0.6824179232988093
              },
              {
                "id": "chunk-99",
                "title": "database_fix_implementation_plan_20250809.md",
                "content": "te CREATE TABLE statements** from service files\n2.**Standardize on main schema. py** as single source of truth\n3. **Add proper error handling** for schema mismatches\n4. **Add validation checks** before database operations\n\n## IMPLEMENTATION PRIORITY\n\n### P0 - CRITICAL (Implement immediately)\n- [ ] Fix CodePatterns table schema mismatch\n- [ ] Update main schema.",
                "type": "document",
                "created_at": "2025-08-09T10:37:00.924372",
                "metadata": {
                  "source": "faiss",
                  "similarity": 0.48241792329880934,
                  "recency": 1.0,
                  "weights": {
                    "alpha": 1.0,
                    "beta": 0.2,
                    "gamma": 0.1,
                    "delta": 0.05,
                    "epsilon": 0.1
                  }
                },
                "score": 0.6824179232988093
              }
            ]
          },
          "code": {
            "success": false,
            "error": "No relevant code documents found",
            "query": "test routing query",
            "context": "",
            "answer": "I don't have enough code information to answer this question."
          }
        },
        "successful_sources": [
          "document"
        ]
      },
      "error": null
    },
    "get_chats_by_tool": {
      "success": true,
      "response": {
        "success": true,
        "messages": [
          {
            "id": 2079,
            "conversation_id": "test_session_1754754756",
            "role": "user",
            "content": "Test chat message for LTMC logging",
            "timestamp": "2025-08-09T17:52:36.664890",
            "agent_name": "test_agent",
            "metadata": null,
            "source_tool": "claude-code"
          },
          {
            "id": 2077,
            "conversation_id": "test_session_123",
            "role": "user",
            "content": "Test chat message for verification",
            "timestamp": "2025-08-09T17:52:32.956432",
            "agent_name": null,
            "metadata": null,
            "source_tool": "claude-code"
          }
        ],
        "count": 2,
        "source_tool": "claude-code"
      },
      "error": null
    },
    "add_todo": {
      "success": true,
      "response": {
        "success": true,
        "todo_id": 52,
        "message": "Todo added successfully"
      },
      "error": null
    },
    "list_todos": {
      "success": true,
      "response": {
        "success": true,
        "todos": [
          {
            "id": 52,
            "title": "Test Todo Item",
            "description": "This is a test todo for LTMC task management",
            "priority": "high",
            "completed": false,
            "created_at": "2025-08-09T17:52:37.099733"
          },
          {
            "id": 51,
            "title": "Test Todo Item",
            "description": "This is a test todo for LTMC task management",
            "priority": "high",
            "completed": true,
            "created_at": "2025-08-09T17:49:09.321289"
          },
          {
            "id": 50,
            "title": "P1 Validation Todo",
            "description": "Transport consistency test",
            "priority": "medium",
            "completed": false,
            "created_at": "2025-08-09T17:41:35.911253"
          },
          {
            "id": 49,
            "title": "P1 Validation Todo",
            "description": "Transport consistency test",
            "priority": "medium",
            "completed": false,
            "created_at": "2025-08-09T17:41:35.784567"
          },
          {
            "id": 48,
            "title": "P1 Test Todo",
            "description": "Transport consistency validation todo",
            "priority": "high",
            "completed": false,
            "created_at": "2025-08-09T17:39:53.102300"
          },
          {
            "id": 47,
            "title": "P1 Test Todo",
            "description": "Transport consistency validation todo",
            "priority": "high",
            "completed": false,
            "created_at": "2025-08-09T17:39:52.967543"
          },
          {
            "id": 46,
            "title": "Test todo",
            "description": "Test",
            "priority": "medium",
            "completed": false,
            "created_at": "2025-08-09T17:32:24.485102"
          },
          {
            "id": 45,
            "title": "test",
            "description": "test",
            "priority": "medium",
            "completed": false,
            "created_at": "2025-08-09T17:31:48.191530"
          },
          {
            "id": 44,
            "title": "P0 Fix Validation: log_chat Parameter Order",
            "description": "Comprehensive testing of fixed log_chat tool and LTMC system integrity validation",
            "priority": "high",
            "completed": true,
            "created_at": "2025-08-09T17:31:08.510176"
          },
          {
            "id": 43,
            "title": "Architecture Review: LTMC Parameter Fix Implementation",
            "description": "Validate implementation plan for log_chat parameter order fix in chat_tools.py",
            "priority": "high",
            "completed": true,
            "created_at": "2025-08-09T17:27:35.033262"
          }
        ],
        "count": 10
      },
      "error": null
    },
    "complete_todo": {
      "success": true,
      "response": {
        "success": true,
        "message": "Todo marked as completed"
      },
      "error": null
    },
    "search_todos": {
      "success": true,
      "response": {
        "success": true,
        "todos": [
          {
            "id": 52,
            "title": "Test Todo Item",
            "description": "This is a test todo for LTMC task management",
            "priority": "high",
            "completed": true,
            "created_at": "2025-08-09T17:52:37.099733"
          },
          {
            "id": 51,
            "title": "Test Todo Item",
            "description": "This is a test todo for LTMC task management",
            "priority": "high",
            "completed": true,
            "created_at": "2025-08-09T17:49:09.321289"
          },
          {
            "id": 50,
            "title": "P1 Validation Todo",
            "description": "Transport consistency test",
            "priority": "medium",
            "completed": false,
            "created_at": "2025-08-09T17:41:35.911253"
          },
          {
            "id": 49,
            "title": "P1 Validation Todo",
            "description": "Transport consistency test",
            "priority": "medium",
            "completed": false,
            "created_at": "2025-08-09T17:41:35.784567"
          },
          {
            "id": 48,
            "title": "P1 Test Todo",
            "description": "Transport consistency validation todo",
            "priority": "high",
            "completed": false,
            "created_at": "2025-08-09T17:39:53.102300"
          },
          {
            "id": 47,
            "title": "P1 Test Todo",
            "description": "Transport consistency validation todo",
            "priority": "high",
            "completed": false,
            "created_at": "2025-08-09T17:39:52.967543"
          },
          {
            "id": 46,
            "title": "Test todo",
            "description": "Test",
            "priority": "medium",
            "completed": false,
            "created_at": "2025-08-09T17:32:24.485102"
          },
          {
            "id": 45,
            "title": "test",
            "description": "test",
            "priority": "medium",
            "completed": false,
            "created_at": "2025-08-09T17:31:48.191530"
          },
          {
            "id": 44,
            "title": "P0 Fix Validation: log_chat Parameter Order",
            "description": "Comprehensive testing of fixed log_chat tool and LTMC system integrity validation",
            "priority": "high",
            "completed": true,
            "created_at": "2025-08-09T17:31:08.510176"
          },
          {
            "id": 41,
            "title": "Test Todo Item",
            "description": "This is a test todo for LTMC task management",
            "priority": "high",
            "completed": true,
            "created_at": "2025-08-09T17:14:03.502752"
          }
        ],
        "count": 10
      },
      "error": null
    },
    "build_context": {
      "success": true,
      "response": {
        "success": true,
        "context": "Title: Unknown\nContent: Test document 1\n\nTitle: Unknown\nContent: Test document 2",
        "token_count": 12,
        "documents_processed": 2,
        "max_tokens": 1000
      },
      "error": null
    },
    "retrieve_by_type": {
      "success": true,
      "response": {
        "success": true,
        "documents": [
          {
            "id": "chunk-56",
            "title": "integration_test_1754727185.md",
            "content": "Integration test validation at 1754727185.0138457",
            "type": "document",
            "created_at": "2025-08-09T10:13:05.015061",
            "metadata": {
              "source": "faiss",
              "similarity": 0.6713141209869571,
              "recency": 1.0,
              "weights": {
                "alpha": 1.0,
                "beta": 0.2,
                "gamma": 0.1,
                "delta": 0.05,
                "epsilon": 0.1
              }
            },
            "score": 0.871314120986957
          },
          {
            "id": "chunk-99",
            "title": "database_fix_implementation_plan_20250809.md",
            "content": "te CREATE TABLE statements** from service files\n2.**Standardize on main schema. py** as single source of truth\n3. **Add proper error handling** for schema mismatches\n4. **Add validation checks** before database operations\n\n## IMPLEMENTATION PRIORITY\n\n### P0 - CRITICAL (Implement immediately)\n- [ ] Fix CodePatterns table schema mismatch\n- [ ] Update main schema.",
            "type": "document",
            "created_at": "2025-08-09T10:37:00.924372",
            "metadata": {
              "source": "faiss",
              "similarity": 0.6713141209869571,
              "recency": 1.0,
              "weights": {
                "alpha": 1.0,
                "beta": 0.2,
                "gamma": 0.1,
                "delta": 0.05,
                "epsilon": 0.1
              }
            },
            "score": 0.871314120986957
          },
          {
            "id": "chunk-100",
            "title": "database_fix_implementation_plan_20250809.md",
            "content": "ns table schema mismatch\n- [ ] Update main schema.py file\n- [ ] Test all code pattern tools\n\n### P1 - HIGH (Next)\n- [ ] Implement database migration system\n- [ ] Add schema validation\n- [ ] Clean up duplicate schema definitions\n\n### P2 - MEDIUM (Follow-up)\n- [ ] Add database versioning\n- [ ] Implement automatic migration on startup\n- [ ] Add comprehensive schema tests\n\n## TESTING STRATEGY\n\n1. **Backup current database** before any changes\n2. **Test migration script** on copy first\n3.",
            "type": "document",
            "created_at": "2025-08-09T10:37:00.924372",
            "metadata": {
              "source": "faiss",
              "similarity": 0.6713141209869571,
              "recency": 1.0,
              "weights": {
                "alpha": 1.0,
                "beta": 0.2,
                "gamma": 0.1,
                "delta": 0.05,
                "epsilon": 0.1
              }
            },
            "score": 0.871314120986957
          }
        ],
        "count": 3
      },
      "error": null
    },
    "store_context_links_tool": {
      "success": true,
      "response": null,
      "error": null
    },
    "get_context_links_for_message_tool": {
      "success": true,
      "response": null,
      "error": null
    },
    "get_messages_for_chunk_tool": {
      "success": true,
      "response": null,
      "error": null
    },
    "get_context_usage_statistics_tool": {
      "success": true,
      "response": null,
      "error": null
    },
    "link_resources": {
      "success": true,
      "response": {
        "success": true,
        "relationship_created": true,
        "source_id": "doc_1",
        "target_id": "doc_2",
        "relationship_type": "references"
      },
      "error": null
    },
    "query_graph": {
      "success": true,
      "response": {
        "success": true,
        "relationships": [
          {
            "source_id": "doc_1",
            "target_id": "doc_2",
            "relationship_type": "references",
            "properties": {
              "type": "references"
            }
          }
        ],
        "count": 1
      },
      "error": null
    },
    "auto_link_documents": {
      "success": true,
      "response": {
        "success": true,
        "links_created": 1,
        "documents_processed": 2
      },
      "error": null
    },
    "get_document_relationships_tool": {
      "success": true,
      "response": null,
      "error": null
    },
    "list_tool_identifiers": {
      "success": true,
      "response": {
        "success": true,
        "tools": [
          {
            "identifier": "claude-code",
            "message_count": 2,
            "conversation_count": 2,
            "first_used": "2025-08-09T17:52:32.956432",
            "last_used": "2025-08-09T17:52:36.664890",
            "status": "active"
          }
        ],
        "total_tools": 1,
        "total_messages": 2,
        "standard_identifiers": [
          "claude-code",
          "cursor",
          "vscode",
          "pycharm",
          "jupyter",
          "vim",
          "emacs",
          "sublime",
          "atom",
          "nova",
          "zed",
          "copilot"
        ]
      },
      "error": null
    },
    "get_tool_conversations": {
      "success": true,
      "response": {
        "success": true,
        "conversations": [
          {
            "conversation_id": "test_session_1754754756",
            "message_count": 1,
            "started_at": "2025-08-09T17:52:36.664890",
            "last_activity": "2025-08-09T17:52:36.664890",
            "roles": [
              "user"
            ]
          },
          {
            "conversation_id": "test_session_123",
            "message_count": 1,
            "started_at": "2025-08-09T17:52:32.956432",
            "last_activity": "2025-08-09T17:52:32.956432",
            "roles": [
              "user"
            ]
          }
        ],
        "count": 2,
        "source_tool": "claude-code"
      },
      "error": null
    },
    "log_code_attempt": {
      "success": true,
      "response": {
        "success": true,
        "pattern_id": 42,
        "message": "Code pattern stored with result: pass"
      },
      "error": null
    },
    "get_code_patterns": {
      "success": true,
      "response": {
        "success": true,
        "patterns": [
          {
            "id": 42,
            "function_name": "test_function",
            "file_name": null,
            "module_name": null,
            "input_prompt": "Create a test function",
            "generated_code": "def test_function():\n    return True",
            "result": "pass",
            "execution_time_ms": null,
            "error_message": null,
            "tags": [
              "python",
              "test"
            ],
            "created_at": "2025-08-09T17:52:38.776564",
            "vector_id": 698
          },
          {
            "id": 41,
            "function_name": "test_function",
            "file_name": null,
            "module_name": null,
            "input_prompt": "Create a test function",
            "generated_code": "def test_function():\n    return True",
            "result": "pass",
            "execution_time_ms": null,
            "error_message": null,
            "tags": [
              "python",
              "test"
            ],
            "created_at": "2025-08-09T17:49:10.989444",
            "vector_id": 696
          },
          {
            "id": 40,
            "function_name": "log_chat_handler",
            "file_name": "chat_tools.py",
            "module_name": "ltms.tools",
            "input_prompt": "Fix LTMC log_chat parameter order mismatch causing NoneType not iterable error",
            "generated_code": "# BEFORE (BROKEN):\ndef log_chat_handler(content: str, conversation_id: str, role: str = \"user\") -> Dict[str, Any]:\n    return _log_chat(content, conversation_id, role)\n\n# AFTER (FIXED):\ndef log_chat_handler(conversation_id: str, role: str, content: str, agent_name: str = None, metadata: Dict[str, Any] = None, source_tool: str = None) -> Dict[str, Any]:\n    return _log_chat(conversation_id, role, content, agent_name, metadata, source_tool)",
            "result": "pass",
            "execution_time_ms": null,
            "error_message": null,
            "tags": [
              "ltmc",
              "parameter-fix",
              "chat-tools",
              "production-critical",
              "multi-agent-success"
            ],
            "created_at": "2025-08-09T17:49:04.706235",
            "vector_id": 694
          }
        ],
        "count": 3,
        "query": "test function"
      },
      "error": null
    },
    "analyze_code_patterns_tool": {
      "success": true,
      "response": null,
      "error": null
    },
    "redis_cache_stats": {
      "success": true,
      "response": {
        "success": true,
        "stats": {
          "connected": true,
          "redis_version": "7.2.4",
          "used_memory": "1.12M",
          "total_connections": 2,
          "embedding_cache_count": 0,
          "query_cache_count": 0,
          "total_keys": 0
        }
      },
      "error": null
    },
    "redis_flush_cache": {
      "success": true,
      "response": {
        "success": true,
        "result": {
          "flushed_queries": 0
        }
      },
      "error": null
    },
    "redis_health_check": {
      "success": true,
      "response": {
        "success": true,
        "health": {
          "healthy": true,
          "connected": true,
          "host": "localhost",
          "port": 6382,
          "db": 0
        }
      },
      "error": null
    }
  },
  "stdio": {
    "store_memory": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "retrieve_memory": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "log_chat": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "ask_with_context": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "route_query": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "get_chats_by_tool": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "add_todo": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "list_todos": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "complete_todo": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "search_todos": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "build_context": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "retrieve_by_type": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "store_context_links_tool": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "get_context_links_for_message_tool": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "get_messages_for_chunk_tool": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "get_context_usage_statistics_tool": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "link_resources": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "query_graph": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "auto_link_documents": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "get_document_relationships_tool": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "list_tool_identifiers": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "get_tool_conversations": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "log_code_attempt": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "get_code_patterns": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "analyze_code_patterns_tool": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "redis_cache_stats": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "redis_flush_cache": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    },
    "redis_health_check": {
      "success": false,
      "response": null,
      "error": "'FastMCP' object has no attribute 'tools'"
    }
  },
  "summary": {
    "total_tools": 28,
    "http_passed": 28,
    "http_failed": 0,
    "stdio_passed": 0,
    "stdio_failed": 28,
    "start_time": "2025-08-09T17:52:36.412402",
    "end_time": "2025-08-09T17:52:47.010899"
  }
}