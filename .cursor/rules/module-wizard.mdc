---
description: FirstSpirit module creation wizard rules
tags: [wizard, module, creation, firstspirit, scaffolding]
version: "1.0"
---

# Module Creation Wizard Rules

## Wizard Flow Design
```typescript
interface WizardStep {
    id: string;
    title: string;
    description: string;
    component: React.ComponentType<WizardStepProps>;
    validation: (data: any) => ValidationResult;
    nextStep?: string;
    prevStep?: string;
}

const MODULE_WIZARD_STEPS: WizardStep[] = [
    {
        id: 'basic_info',
        title: 'Basic Information',
        description: 'Define your module\'s basic properties',
        component: BasicInfoStep,
        validation: validateBasicInfo
    },
    {
        id: 'module_type',
        title: 'Module Type',
        description: 'Select the type of FirstSpirit module',
        component: ModuleTypeStep,
        validation: validateModuleType
    },
    {
        id: 'components',
        title: 'Components',
        description: 'Choose components to include',
        component: ComponentsStep,
        validation: validateComponents
    },
    {
        id: 'integrations',
        title: 'Integrations',
        description: 'Configure external integrations',
        component: IntegrationsStep,
        validation: validateIntegrations
    },
    {
        id: 'advanced',
        title: 'Advanced Options',
        description: 'Configure advanced module settings',
        component: AdvancedStep,
        validation: validateAdvanced
    },
    {
        id: 'review',
        title: 'Review & Generate',
        description: 'Review your choices and generate the module',
        component: ReviewStep,
        validation: validateReview
    }
];
```

## Module Requirements Collection
```typescript
interface ModuleRequirements {
    // Basic Information
    name: string;
    displayName: string;
    description: string;
    version: string;
    vendor: string;
    
    // Technical Details
    moduleType: 'content' | 'workflow' | 'integration' | 'ui' | 'service';
    firstSpiritVersion: string;
    targetJavaVersion: string;
    
    // Components
    components: {
        inputComponents: InputComponentConfig[];
        outputComponents: OutputComponentConfig[];
        sectionTemplates: SectionTemplateConfig[];
        pageTemplates: PageTemplateConfig[];
        workflows: WorkflowConfig[];
        services: ServiceConfig[];
    };
    
    // Integrations
    integrations: {
        database: DatabaseConfig | null;
        webService: WebServiceConfig | null;
        thirdParty: ThirdPartyConfig[];
    };
    
    // Advanced
    security: SecurityConfig;
    performance: PerformanceConfig;
    deployment: DeploymentConfig;
}

// Step Components
const BasicInfoStep: React.FC = ({ data, onChange }) => {
    return (
        
            
                Module Name
                <input
                    type="text"
                    value={data.name || ''}
                    onChange={(e) => onChange('name', e.target.value)}
                    placeholder="my-firstspirit-module"
                    pattern="[a-z0-9-]+"
                />
                Use lowercase letters, numbers, and hyphens only
            
            
            
                Display Name
                <input
                    type="text"
                    value={data.displayName || ''}
                    onChange={(e) => onChange('displayName', e.target.value)}
                    placeholder="My FirstSpirit Module"
                />
            
            
            
                Description
                <textarea
                    value={data.description || ''}
                    onChange={(e) => onChange('description', e.target.value)}
                    placeholder="Describe what your module does..."
                    rows={3}
                />
            
        
    );
};
```

## Code Generation Templates
```python
class ModuleScaffoldGenerator:
    """Generate complete module structure from wizard requirements"""
    
    def __init__(self):
        self.templates = {
            'module_descriptor': self.generate_module_xml,
            'input_component': self.generate_input_component,
            'output_component': self.generate_output_component,
            'section_template': self.generate_section_template,
            'page_template': self.generate_page_template,
            'workflow': self.generate_workflow,
            'service': self.generate_service,
            'pom_xml': self.generate_pom_xml,
            'readme': self.generate_readme
        }
    
    def generate_module_structure(self, requirements: ModuleRequirements) -> ModuleStructure:
        """Generate complete module file structure"""
        
        structure = ModuleStructure(base_path=requirements.name)
        
        # Core structure
        structure.add_directory('src/main/java/com/company/firstspirit/modules')
        structure.add_directory('src/main/resources')
        structure.add_directory('src/test/java')
        structure.add_directory('conf')
        structure.add_directory('docs')
        
        # Generate module descriptor
        module_xml = self.generate_module_xml(requirements)
        structure.add_file('src/main/resources/module.xml', module_xml)
        
        # Generate Maven POM
        pom_xml = self.generate_pom_xml(requirements)
        structure.add_file('pom.xml', pom_xml)
        
        # Generate components
        for component in requirements.components.inputComponents:
            java_code = self.generate_input_component(component, requirements)
            class_path = f"src/main/java/com/company/firstspirit/modules/{component.name}InputComponent.java"
            structure.add_file(class_path, java_code)
        
        # Generate tests
        for component in requirements.components.inputComponents:
            test_code = self.generate_component_test(component, requirements)
            test_path = f"src/test/java/com/company/firstspirit/modules/{component.name}InputComponentTest.java"
            structure.add_file(test_path, test_code)
        
        # Generate documentation
        readme = self.generate_readme(requirements)
        structure.add_file('README.md', readme)
        
        return structure
    
    def generate_input_component(self, component: InputComponentConfig, requirements: ModuleRequirements) -> str:
        """Generate input component Java code"""
        
        return f'''
package com.company.firstspirit.modules;

import de.espirit.firstspirit.access.editor.value.AbstractEditorValue;
import de.espirit.firstspirit.client.plugin.dataaccess.aspects.Aspect;
import de.espirit.firstspirit.client.plugin.dataaccess.aspects.PartialRendering;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.EnumSet;
import java.util.Set;

/**
 * {component.description}
 * 
 * Generated by FirstSpirit Local Agent
 * Module: {requirements.name}
 * Version: {requirements.version}
 */
public class {component.name}InputComponent extends AbstractEditorValue implements PartialRendering {{
    
    private static final Logger LOGGER = LoggerFactory.getLogger({component.name}InputComponent.class);
    
    @Override
    public Set aspects() {{
        return EnumSet.of(Aspect.CONTENT, Aspect.PREVIEW);
    }}
    
    @Override
    public void doEdit() {{
        try {{
            LOGGER.debug("Starting edit operation for {{}} component", "{component.name}");
            
            // TODO: Implement your edit logic here
            // Example: Open custom dialog, validate input, etc.
            
            LOGGER.debug("Edit operation completed successfully");
        }} catch (Exception e) {{
            LOGGER.error("Error during edit operation in {component.name} component", e);
            throw new RuntimeException("Edit operation failed: " + e.getMessage(), e);
        }}
    }}
    
    @Override
    public Object getValue() {{
        try {{
            // TODO: Return the component's value
            // This should return the data structure that represents your component's content
            return null;
        }} catch (Exception e) {{
            LOGGER.error("Error getting value from {component.name} component", e);
            return null;
        }}
    }}
    
    // TODO: Add additional methods as needed
    // Examples: validation, data transformation, custom business logic
}}
'''
```

## Wizard Integration with IDEs
```typescript
// VSCode Wizard Integration
class VSCodeModuleWizard {
    async showWizard(): Promise {
        const panel = vscode.window.createWebviewPanel(
            'firstSpiritWizard',
            'FirstSpirit Module Wizard',
            vscode.ViewColumn.One,
            {
                enableScripts: true,
                retainContextWhenHidden: true
            }
        );
        
        panel.webview.html = this.getWizardHTML();
        
        return new Promise((resolve) => {
            panel.webview.onDidReceiveMessage(async (message) => {
                switch (message.type) {
                    case 'generate':
                        const requirements = message.requirements;
                        const result = await this.generateModule(requirements);
                        resolve(result);
                        panel.dispose();
                        break;
                    case 'cancel':
                        resolve(null);
                        panel.dispose();
                        break;
                }
            });
        });
    }
    
    private async generateModule(requirements: ModuleRequirements): Promise {
        // Send to agent for generation
        const response = await fetch('http://localhost:8000/api/generate-module', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(requirements)
        });
        
        const result = await response.json();
        
        // Create workspace folder and files
        if (result.success) {
            await this.createModuleFiles(result.structure);
            vscode.window.showInformationMessage('Module generated successfully!');
        }
        
        return requirements;
    }
}

// IntelliJ Wizard Integration
class IntelliJModuleWizard {
    fun showWizard(project: Project): ModuleRequirements? {
        val dialog = FirstSpiritModuleWizardDialog(project)
        return if (dialog.showAndGet()) {
            val requirements = dialog.getRequirements()
            generateModule(project, requirements)
            requirements
        } else {
            null
        }
    }
    
    private fun generateModule(project: Project, requirements: ModuleRequirements) {
        ProgressManager.getInstance().run(object : Task.Backgroundable(project, "Generating FirstSpirit Module", false) {
            override fun run(indicator: ProgressIndicator) {
                try {
                    indicator.text = "Generating module structure..."
                    val moduleStructure = FirstSpiritAgentService.getInstance()
                        .generateModule(requirements)
                    
                    indicator.text = "Creating files..."
                    ApplicationManager.getApplication().invokeAndWait {
                        WriteCommandAction.runWriteCommandAction(project) {
                            createModuleFiles(project, moduleStructure)
                        }
                    }
                    
                    Notifications.Bus.notify(
                        Notification("FirstSpirit", "Module Generated", 
                                   "FirstSpirit module '${requirements.name}' created successfully", 
                                   NotificationType.INFORMATION), 
                        project
                    )
                } catch (e: Exception) {
                    logger.error("Module generation failed", e)
                    Notifications.Bus.notify(
                        Notification("FirstSpirit", "Generation Failed", 
                                   "Failed to generate module: ${e.message}", 
                                   NotificationType.ERROR), 
                        project
                    )
                }
            }
        })
    }
}
```
```
