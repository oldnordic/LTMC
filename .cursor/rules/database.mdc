## Database Rule
Create: `.cursor/rules/database.mdc`

```markdown
---
description: Database operations for pattern memory
globs: ["**/memory.py", "**/database.py"]
---

# Database Pattern Memory Rules

## Schema Requirements
- Use SQLite for simplicity and portability
- Include tables: code_patterns, failed_patterns, project_rules
- Add proper indexes for pattern matching queries
- Include timestamp fields for pattern aging

## Connection Management
- Always use context managers for database connections
- Include retry logic for database operations
- Handle database lock errors gracefully
- Close connections properly in all code paths

## Pattern Storage
- Store successful code transformations with metadata
- Include language, task type, and quality scores
- Implement pattern similarity matching
- Add pattern expiration for outdated examples

Example implementation:
```python
def store_pattern(self, before: str, after: str, task: str):
    with sqlite3.connect(self.db_path) as conn:
        conn.execute("""
            INSERT INTO patterns (before_code, after_code, task_type, created_at)
            VALUES (?, ?, ?, ?)
        """, (before, after, task, datetime.now().isoformat()))
