---
description: FirstSpirit expert knowledge and development patterns
tags: [firstspirit, expert, cms, enterprise, patterns]
version: "2.0"
---

# FirstSpirit Expert Development Rules

## FirstSpirit Architecture Understanding
When analyzing or generating FirstSpirit code, always consider:

### Core Concepts
- **FirstSpirit Server**: Central CMS server managing content and templates
- **ContentCreator**: Editorial interface for content management
- **SiteArchitect**: Administrative interface for project structure
- **ServerManager**: Server administration and configuration
- **Developer Mode**: Development environment with hot deployment

### Module Types and Purposes
```java
// Input Components - Custom input fields for editors
public class RichTextInputComponent extends AbstractEditorValue {
    // Purpose: Custom content input with specific validation/formatting
    // Used in: Page templates, section templates, content types
}

// Output Components - Custom rendering logic
public class MediaGalleryOutputComponent extends AbstractOutputComponent {
    // Purpose: Custom display logic for complex content structures
    // Used in: Section templates, page templates
}

// Section Templates - Reusable content blocks
public class ArticleSectionTemplate extends SectionTemplate {
    // Purpose: Structured content sections with predefined fields
    // Used in: Page composition, content inheritance
}

// Page Templates - Full page layouts
public class LandingPageTemplate extends PageTemplate {
    // Purpose: Complete page structure with sections and metadata
    // Used in: Site structure, page creation
}

// Workflows - Business process automation
public class PublishWorkflow extends Workflow {
    // Purpose: Automate content lifecycle (creation, review, publish)
    // Used in: Content management, approval processes
}

// Modules - Packaged functionality
public class CustomModule extends Module {
    // Purpose: Deployable packages with components, templates, services
    // Used in: Functionality distribution, third-party integrations
}
```

### FirstSpirit APIs and Best Practices
```java
// Content Access API
public void accessContent() {
    Project project = context.getProject();
    StoreAgent storeAgent = project.getUserService().getStoreAgent();
    
    // Navigate store hierarchy
    Store store = storeAgent.getStore(Store.Type.PAGESTORE);
    PageFolder rootFolder = (PageFolder) store.getFirstLevelElements().get(0);
    
    // Always handle null checks and exceptions
    if (rootFolder != null) {
        for (StoreElement element : rootFolder.getChildren()) {
            processElement(element);
        }
    }
}

// Media handling
public Media uploadMedia(File file, MediaFolder folder) {
    try {
        Media media = folder.createMedia(file.getName(), file);
        media.setData(file);
        media.save();
        media.setLock(false, false); // Always unlock after operations
        return media;
    } catch (Exception e) {
        LOGGER.error("Media upload failed", e);
        throw new FirstSpiritException("Failed to upload media: " + file.getName(), e);
    }
}

// Proper resource management
public void performContentOperation() {
    RequestContext context = null;
    try {
        context = RequestContextFactory.create();
        // Perform operations with context
    } finally {
        if (context != null) {
            context.close(); // Always close contexts
        }
    }
}
```

### Code Analysis Patterns
When analyzing FirstSpirit modules, examine:

1. **Module Structure Analysis**:
   - `/src/main/java` - Core Java implementation
   - `/src/main/resources` - Configuration files, templates
   - `module.xml` - Module descriptor
   - `web/` - Web components (if applicable)
   - `conf/` - Configuration files

2. **Dependency Analysis**:
   - FirstSpirit API dependencies
   - Third-party library usage
   - Module interdependencies
   - Resource requirements

3. **Performance Considerations**:
   - Database query patterns
   - Caching strategies
   - Memory usage patterns
   - Thread safety implementation

4. **Security Assessment**:
   - Permission handling
   - Input validation
   - XSS prevention
   - SQL injection protection

## Code Generation Rules
Always generate code that:
- Follows FirstSpirit naming conventions
- Implements proper error handling
- Includes comprehensive logging
- Uses FirstSpirit APIs correctly
- Handles resource cleanup properly
- Includes JavaDoc documentation
- Follows enterprise coding standards
```
