[pytest]
# pytest-asyncio configuration for 126 Tools Comprehensive Testing
# Using Context7 research patterns for optimal async test performance

# Set asyncio mode to auto for seamless async test discovery
asyncio_mode = auto

# Configure default event loop scopes for consistent performance
asyncio_default_test_loop_scope = session
asyncio_default_fixture_loop_scope = session

# Test discovery patterns
testpaths = .
python_files = test_*.py *_test.py test_comprehensive_126_tools.py
python_classes = Test* *Tests
python_functions = test_*

# Markers for test organization
markers =
    ltmc: LTMC MCP server tool tests
    mermaid: Mermaid diagram generation tool tests
    memory: Memory integration tests (Redis/Neo4j/FAISS/SQLite)
    performance: Performance and load testing
    concurrent: Concurrent execution tests
    integration: Full system integration tests
    slow: Tests that take longer than 5 seconds

# Logging configuration for comprehensive test visibility
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test output configuration  
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --asyncio-mode=auto
    -ra

# Performance testing timeouts (requires pytest-timeout plugin)
# timeout = 300  
# timeout_method = thread

# Minimum Python version for async features
minversion = 6.0

# Filters for test execution
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::pytest.PytestUnraisableExceptionWarning