#!/bin/bash
# KWE Build Command
#
# Build and deployment pipeline for Knowledge World Engine (KWE)
# Supports frontend, backend, and complete system builds
# Following KWE architectural compliance and production standards

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
KWE_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"
PROJECT_ROOT="$KWE_ROOT"
FRONTEND_DIR="$KWE_ROOT/frontend"
LOG_DIR="$KWE_ROOT/logs"
BUILD_LOG_FILE="$LOG_DIR/kwe_build.log"

# Default values
DEFAULT_BUILD_TARGET="all"

# Function to log messages
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${timestamp} [${level}] ${message}" | tee -a "$BUILD_LOG_FILE"
}

# Function to display usage
display_usage() {
    echo -e "${BLUE}KWE Build Command - Build and Deployment Pipeline${NC}"
    echo "================================================="
    echo ""
    echo "Usage: $0 [BUILD_TARGET]"
    echo ""
    echo "Arguments:"
    echo "  BUILD_TARGET    Build target (frontend|backend|all) [default: all]"
    echo ""
    echo "Build Targets:"
    echo "  frontend  Build React + TypeScript frontend and Tauri desktop app"
    echo "  backend   Build Python backend with Poetry"
    echo "  all       Build complete KWE system (frontend + backend)"
    echo ""
    echo "Environment Variables:"
    echo "  \$BUILD_TARGET    Override build target"
    echo ""
    echo "Examples:"
    echo "  $0 frontend        # Build frontend only"
    echo "  $0 backend         # Build backend only"
    echo "  $0 all             # Build complete system"
    echo ""
    echo "KWE Build Architecture:"
    echo "  • Frontend: React 18+ + TypeScript + Tauri cross-platform"
    echo "  • Backend: Python 3.11+ + FastAPI + Poetry"
    echo "  • Quality: Complete linting, type checking, and testing"
    echo "  • Production: Optimized builds with proper bundling"
    echo ""
}

# Function to check build dependencies
check_build_dependencies() {
    log_message "INFO" "Checking KWE build dependencies..."
    
    local missing_deps=()
    
    # Check Python and Poetry
    if ! command -v python3 >/dev/null 2>&1; then
        missing_deps+=("python3")
    fi
    
    if ! command -v poetry >/dev/null 2>&1; then
        missing_deps+=("poetry")
    fi
    
    # Check Node.js and npm
    if ! command -v node >/dev/null 2>&1; then
        missing_deps+=("node")
    fi
    
    if ! command -v npm >/dev/null 2>&1; then
        missing_deps+=("npm")
    fi
    
    # Check Rust and Cargo for Tauri
    if ! command -v rustc >/dev/null 2>&1; then
        missing_deps+=("rust")
    fi
    
    if ! command -v cargo >/dev/null 2>&1; then
        missing_deps+=("cargo")
    fi
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        log_message "ERROR" "Missing build dependencies: ${missing_deps[*]}"
        echo -e "${RED}❌ Missing dependencies: ${missing_deps[*]}${NC}"
        echo -e "${YELLOW}💡 Install requirements:${NC}"
        echo -e "${YELLOW}  Python 3.11+: https://python.org/downloads${NC}"
        echo -e "${YELLOW}  Poetry: curl -sSL https://install.python-poetry.org | python3 -${NC}"
        echo -e "${YELLOW}  Node.js 18+: https://nodejs.org/en/download${NC}"
        echo -e "${YELLOW}  Rust: https://rustup.rs/${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✅ All build dependencies available${NC}"
    return 0
}

# Function to check project structure
check_project_structure() {
    log_message "INFO" "Checking KWE project structure..."
    
    local missing_files=()
    
    # Check backend files
    if [ ! -f "$PROJECT_ROOT/pyproject.toml" ]; then
        missing_files+=("pyproject.toml")
    fi
    
    if [ ! -f "$PROJECT_ROOT/server.py" ]; then
        missing_files+=("server.py")
    fi
    
    # Check frontend files
    if [ ! -f "$FRONTEND_DIR/package.json" ]; then
        missing_files+=("frontend/package.json")
    fi
    
    if [ ! -f "$FRONTEND_DIR/src-tauri/tauri.conf.json" ]; then
        missing_files+=("frontend/src-tauri/tauri.conf.json")
    fi
    
    if [ ${#missing_files[@]} -gt 0 ]; then
        log_message "ERROR" "Missing project files: ${missing_files[*]}"
        echo -e "${RED}❌ Missing project files: ${missing_files[*]}${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✅ Project structure valid${NC}"
    return 0
}

# Function to build backend
build_backend() {
    log_message "INFO" "Building KWE backend with Poetry..."
    echo -e "${BLUE}🐍 Building KWE Backend${NC}"
    echo "======================="
    
    cd "$PROJECT_ROOT"
    
    # Install/update dependencies
    echo -e "${CYAN}Installing dependencies...${NC}"
    if ! poetry install --with dev; then
        log_message "ERROR" "Failed to install backend dependencies"
        echo -e "${RED}❌ Backend dependency installation failed${NC}"
        return 1
    fi
    
    # Run quality checks before building
    echo -e "${CYAN}Running quality checks...${NC}"
    
    # Type checking
    if ! poetry run mypy src/ api/ --ignore-missing-imports; then
        log_message "WARN" "Type checking issues found"
        echo -e "${YELLOW}⚠️  Type checking issues found${NC}"
    else
        echo -e "${GREEN}✅ Type checking passed${NC}"
    fi
    
    # Linting
    if ! poetry run flake8 src/ api/ tests/; then
        log_message "WARN" "Linting issues found"
        echo -e "${YELLOW}⚠️  Linting issues found${NC}"
    else
        echo -e "${GREEN}✅ Linting passed${NC}"
    fi
    
    # Code formatting check
    if ! poetry run black --check src/ api/ tests/; then
        log_message "WARN" "Code formatting issues found"
        echo -e "${YELLOW}⚠️  Code formatting issues found${NC}"
        echo -e "${CYAN}Auto-formatting code...${NC}"
        poetry run black src/ api/ tests/
    else
        echo -e "${GREEN}✅ Code formatting passed${NC}"
    fi
    
    # Import sorting check
    if ! poetry run isort --check-only src/ api/ tests/; then
        log_message "WARN" "Import sorting issues found"
        echo -e "${YELLOW}⚠️  Import sorting issues found${NC}"
        echo -e "${CYAN}Auto-sorting imports...${NC}"
        poetry run isort src/ api/ tests/
    else
        echo -e "${GREEN}✅ Import sorting passed${NC}"
    fi
    
    # Build package
    echo -e "${CYAN}Building Python package...${NC}"
    if ! poetry build; then
        log_message "ERROR" "Failed to build backend package"
        echo -e "${RED}❌ Backend build failed${NC}"
        return 1
    fi
    
    log_message "INFO" "Backend build completed successfully"
    echo -e "${GREEN}✅ Backend build completed${NC}"
    
    # Display build artifacts
    if [ -d "dist" ]; then
        echo -e "${CYAN}📦 Build artifacts:${NC}"
        ls -la dist/ | grep -E "\.(whl|tar\.gz)$" | while read -r line; do
            echo -e "${CYAN}  $line${NC}"
        done
    fi
    
    return 0
}

# Function to build frontend
build_frontend() {
    log_message "INFO" "Building KWE frontend with React + Tauri..."
    echo -e "${BLUE}⚛️  Building KWE Frontend${NC}"
    echo "========================="
    
    if [ ! -d "$FRONTEND_DIR" ]; then
        log_message "ERROR" "Frontend directory not found: $FRONTEND_DIR"
        echo -e "${RED}❌ Frontend directory not found${NC}"
        return 1
    fi
    
    cd "$FRONTEND_DIR"
    
    # Install/update dependencies
    echo -e "${CYAN}Installing Node.js dependencies...${NC}"
    if ! npm install; then
        log_message "ERROR" "Failed to install frontend dependencies"
        echo -e "${RED}❌ Frontend dependency installation failed${NC}"
        return 1
    fi
    
    # Run frontend tests if available
    if [ -f "package.json" ] && grep -q '"test"' package.json; then
        echo -e "${CYAN}Running frontend tests...${NC}"
        if ! npm run test; then
            log_message "WARN" "Frontend tests failed"
            echo -e "${YELLOW}⚠️  Frontend tests failed${NC}"
        else
            echo -e "${GREEN}✅ Frontend tests passed${NC}"
        fi
    fi
    
    # Build React application
    echo -e "${CYAN}Building React application...${NC}"
    if ! npm run build; then
        log_message "ERROR" "Failed to build React application"
        echo -e "${RED}❌ React build failed${NC}"
        return 1
    fi
    
    echo -e "${GREEN}✅ React build completed${NC}"
    
    # Build Tauri desktop app
    echo -e "${CYAN}Building Tauri desktop application...${NC}"
    if ! npm run tauri build; then
        log_message "ERROR" "Failed to build Tauri application"
        echo -e "${RED}❌ Tauri build failed${NC}"
        return 1
    fi
    
    log_message "INFO" "Frontend build completed successfully"
    echo -e "${GREEN}✅ Frontend build completed${NC}"
    
    # Display build artifacts
    if [ -d "dist" ]; then
        echo -e "${CYAN}📦 React build artifacts:${NC}"
        du -sh dist/* 2>/dev/null | while read -r line; do
            echo -e "${CYAN}  $line${NC}"
        done
    fi
    
    if [ -d "src-tauri/target/release" ]; then
        echo -e "${CYAN}📦 Tauri build artifacts:${NC}"
        find src-tauri/target/release -name "*.deb" -o -name "*.appimage" -o -name "*.dmg" -o -name "*.msi" 2>/dev/null | while read -r file; do
            local size=$(du -sh "$file" 2>/dev/null | cut -f1)
            echo -e "${CYAN}  $size $(basename "$file")${NC}"
        done
    fi
    
    return 0
}

# Function to build all components
build_all() {
    log_message "INFO" "Building complete KWE system..."
    echo -e "${BLUE}🚀 Building Complete KWE System${NC}"
    echo "==============================="
    
    local build_start_time=$(date +%s)
    
    # Build backend first
    echo -e "${CYAN}Phase 1: Backend Build${NC}"
    if ! build_backend; then
        log_message "ERROR" "Backend build failed in complete system build"
        return 1
    fi
    
    echo ""
    
    # Build frontend
    echo -e "${CYAN}Phase 2: Frontend Build${NC}"
    if ! build_frontend; then
        log_message "ERROR" "Frontend build failed in complete system build"
        return 1
    fi
    
    echo ""
    
    # Run system integration checks
    echo -e "${CYAN}Phase 3: System Integration Validation${NC}"
    echo "======================================"
    
    # Check if server can start (dry run)
    cd "$PROJECT_ROOT"
    echo -e "${CYAN}Validating server startup...${NC}"
    if timeout 10s poetry run python -c "
import sys
sys.path.insert(0, '.')
try:
    from server import app
    print('✅ Server imports successful')
except Exception as e:
    print(f'❌ Server import failed: {e}')
    sys.exit(1)
"; then
        echo -e "${GREEN}✅ Server validation passed${NC}"
    else
        log_message "WARN" "Server validation issues found"
        echo -e "${YELLOW}⚠️  Server validation issues found${NC}"
    fi
    
    # Calculate build time
    local build_end_time=$(date +%s)
    local build_duration=$((build_end_time - build_start_time))
    local build_minutes=$((build_duration / 60))
    local build_seconds=$((build_duration % 60))
    
    log_message "INFO" "Complete system build completed in ${build_minutes}m ${build_seconds}s"
    echo -e "${GREEN}✅ Complete system build completed in ${build_minutes}m ${build_seconds}s${NC}"
    
    return 0
}

# Function to display build summary
display_build_summary() {
    local build_target=$1
    local result=$2
    
    echo ""
    echo "====================================="
    if [ $result -eq 0 ]; then
        echo -e "${GREEN}🎉 KWE $build_target Build Completed Successfully${NC}"
        echo ""
        echo -e "${CYAN}Build Results:${NC}"
        echo -e "${CYAN}  Target: $build_target${NC}"
        echo -e "${CYAN}  Status: SUCCESS${NC}"
        echo ""
        
        case "$build_target" in
            backend)
                echo -e "${CYAN}Backend Artifacts:${NC}"
                if [ -d "$PROJECT_ROOT/dist" ]; then
                    echo -e "${CYAN}  📦 Python packages: $PROJECT_ROOT/dist/${NC}"
                fi
                ;;
            frontend)
                echo -e "${CYAN}Frontend Artifacts:${NC}"
                if [ -d "$FRONTEND_DIR/dist" ]; then
                    echo -e "${CYAN}  ⚛️  React build: $FRONTEND_DIR/dist/${NC}"
                fi
                if [ -d "$FRONTEND_DIR/src-tauri/target/release" ]; then
                    echo -e "${CYAN}  📱 Tauri apps: $FRONTEND_DIR/src-tauri/target/release/${NC}"
                fi
                ;;
            all)
                echo -e "${CYAN}Complete System Artifacts:${NC}"
                if [ -d "$PROJECT_ROOT/dist" ]; then
                    echo -e "${CYAN}  📦 Backend: $PROJECT_ROOT/dist/${NC}"
                fi
                if [ -d "$FRONTEND_DIR/dist" ]; then
                    echo -e "${CYAN}  ⚛️  Frontend: $FRONTEND_DIR/dist/${NC}"
                fi
                if [ -d "$FRONTEND_DIR/src-tauri/target/release" ]; then
                    echo -e "${CYAN}  📱 Desktop: $FRONTEND_DIR/src-tauri/target/release/${NC}"
                fi
                ;;
        esac
        
        echo ""
        echo -e "${CYAN}KWE Production Standards:${NC}"
        echo -e "${CYAN}  ✅ Type-Safe Implementation${NC}"
        echo -e "${CYAN}  ✅ Quality-Assured Builds${NC}"
        echo -e "${CYAN}  ✅ Cross-Platform Compatibility${NC}"
        echo -e "${CYAN}  ✅ Production-Ready Artifacts${NC}"
    else
        echo -e "${RED}❌ KWE $build_target Build Failed${NC}"
        echo ""
        echo -e "${YELLOW}💡 Troubleshooting:${NC}"
        echo -e "${YELLOW}  1. Check build logs: $BUILD_LOG_FILE${NC}"
        echo -e "${YELLOW}  2. Ensure dependencies: poetry install && npm install${NC}"
        echo -e "${YELLOW}  3. Verify system requirements${NC}"
        echo -e "${YELLOW}  4. Run quality checks: ./claude/commands/kwe-quality${NC}"
    fi
    echo ""
}

# Main execution
main() {
    local build_target="${1:-${BUILD_TARGET:-$DEFAULT_BUILD_TARGET}}"
    
    # Validate arguments
    case "$build_target" in
        frontend|backend|all)
            ;;
        -h|--help)
            display_usage
            exit 0
            ;;
        *)
            echo -e "${RED}❌ Invalid build target: $build_target${NC}"
            echo -e "${YELLOW}Valid options: frontend, backend, all${NC}"
            display_usage
            exit 1
            ;;
    esac
    
    echo -e "${BLUE}🏗️  KWE Build System${NC}"
    echo "==================="
    echo -e "${CYAN}Build Target: $build_target${NC}"
    echo ""
    
    # Setup logging
    mkdir -p "$LOG_DIR"
    log_message "INFO" "Starting KWE build process: $build_target"
    
    # Check dependencies
    if ! check_build_dependencies; then
        exit 1
    fi
    
    # Check project structure
    if ! check_project_structure; then
        exit 1
    fi
    
    # Run build based on target
    local build_result=0
    case "$build_target" in
        frontend)
            build_frontend || build_result=1
            ;;
        backend)
            build_backend || build_result=1
            ;;
        all)
            build_all || build_result=1
            ;;
    esac
    
    # Display summary
    display_build_summary "$build_target" "$build_result"
    
    exit $build_result
}

# Run main function
main "$@"