#!/bin/bash
# KWE Memory Command
#
# Comprehensive 4-tier memory system management for Knowledge World Engine (KWE)
# Manages PostgreSQL, Redis, Neo4j, Qdrant, and Delta Memory systems
# Following KWE architectural compliance and production standards

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
KWE_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"
PROJECT_ROOT="$KWE_ROOT"
LOG_DIR="$KWE_ROOT/logs"
MEMORY_LOG_FILE="$LOG_DIR/kwe_memory.log"
SCRIPTS_DIR="$KWE_ROOT/scripts"

# Service configurations (KWE-specific)
REDIS_CONTAINER_NAME="kwe_redis"
QDRANT_CONTAINER_NAME="kwe_qdrant"
NEO4J_CONTAINER_NAME="kwe_neo4j"
REDIS_PORT=6380
QDRANT_PORT=6333
NEO4J_HTTP_PORT=7474
NEO4J_BOLT_PORT=7687

# External PostgreSQL configuration
POSTGRES_HOST="192.168.1.119"
POSTGRES_PORT="5432"
POSTGRES_DB="kwe_temporal_memory"
POSTGRES_USER="post"

# KWE Delta memory directory
DELTA_MEMORY_DIR="$KWE_ROOT/memory_storage"

# Default values
DEFAULT_ACTION="status"

# Function to log messages
log_message() {
    local level=$1
    local message=$2
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${timestamp} [${level}] ${message}" | tee -a "$MEMORY_LOG_FILE"
}

# Function to display usage
display_usage() {
    echo -e "${BLUE}KWE Memory Command - 4-Tier Memory System Management${NC}"
    echo "====================================================="
    echo ""
    echo "Usage: $0 [ACTION]"
    echo ""
    echo "Arguments:"
    echo "  ACTION    Memory system action (start|stop|status|reset) [default: status]"
    echo ""
    echo "Memory Actions:"
    echo "  start     Start all 4-tier memory services"
    echo "  stop      Stop all local memory services (preserves data)"
    echo "  status    Display comprehensive memory system status"
    echo "  reset     Reset all memory systems (WARNING: destroys data)"
    echo ""
    echo "Environment Variables:"
    echo "  \$ACTION    Override memory action"
    echo ""
    echo "Examples:"
    echo "  $0 start               # Start all memory services"
    echo "  $0 stop                # Stop all services gracefully"
    echo "  $0 status              # Show detailed system status"
    echo "  $0 reset               # Reset all memory (destructive)"
    echo ""
    echo "KWE 4-Tier Memory Architecture:"
    echo "  Tier 1: PostgreSQL (External) - Temporal memory and change logging"
    echo "  Tier 2: Redis (Local) - High-speed cache with TTL management"
    echo "  Tier 3: Neo4j (Local) - Graph relationships and complex queries"
    echo "  Tier 4: Qdrant (Local) - Vector similarity search and embeddings"
    echo "  Delta: File System (Local) - Domain-specific memory patterns"
    echo ""
}

# Function to check if service scripts exist
check_service_scripts() {
    log_message "INFO" "Checking KWE memory service scripts..."
    
    local missing_scripts=()
    
    if [ ! -f "$SCRIPTS_DIR/start_memory_services.sh" ]; then
        missing_scripts+=("start_memory_services.sh")
    fi
    
    if [ ! -f "$SCRIPTS_DIR/stop_memory_services.sh" ]; then
        missing_scripts+=("stop_memory_services.sh")
    fi
    
    if [ ${#missing_scripts[@]} -gt 0 ]; then
        log_message "ERROR" "Missing memory service scripts: ${missing_scripts[*]}"
        echo -e "${RED}‚ùå Missing scripts: ${missing_scripts[*]}${NC}"
        echo -e "${YELLOW}üí° Ensure scripts exist in: $SCRIPTS_DIR${NC}"
        return 1
    fi
    
    echo -e "${GREEN}‚úÖ All memory service scripts available${NC}"
    return 0
}

# Function to check service connectivity
check_service_connectivity() {
    local service_name=$1
    local host=$2
    local port=$3
    
    if command -v nc >/dev/null 2>&1; then
        if nc -z "$host" "$port" 2>/dev/null; then
            return 0
        else
            return 1
        fi
    else
        # Fallback using timeout and /dev/tcp
        if timeout 5 bash -c "</dev/tcp/$host/$port" 2>/dev/null; then
            return 0
        else
            return 1
        fi
    fi
}

# Function to check container status
check_container_status() {
    local container_name=$1
    
    if docker ps --format "table {{.Names}}" | grep -q "^$container_name$"; then
        return 0  # Running
    elif docker ps -a --format "table {{.Names}}" | grep -q "^$container_name$"; then
        return 1  # Exists but stopped
    else
        return 2  # Does not exist
    fi
}

# Function to get detailed service status
get_service_details() {
    local service_name=$1
    local host=$2
    local port=$3
    local container_name=$4
    
    echo -e "${CYAN}$service_name:${NC}"
    
    if [ -n "$container_name" ]; then
        # Local container service
        check_container_status "$container_name"
        local container_status=$?
        
        case $container_status in
            0)
                echo -e "  ${GREEN}‚úÖ Container: Running${NC}"
                
                # Check connectivity
                if check_service_connectivity "$service_name" "$host" "$port"; then
                    echo -e "  ${GREEN}‚úÖ Network: Responding on $host:$port${NC}"
                    
                    # Get additional service-specific info
                    case "$service_name" in
                        "Redis Cache Layer")
                            if command -v redis-cli >/dev/null 2>&1; then
                                local redis_info=$(redis-cli -h "$host" -p "$port" INFO server 2>/dev/null | grep "redis_version" | cut -d: -f2 | tr -d '\r')
                                if [ -n "$redis_info" ]; then
                                    echo -e "  ${CYAN}üìã Version: Redis $redis_info${NC}"
                                fi
                                
                                local memory_usage=$(redis-cli -h "$host" -p "$port" INFO memory 2>/dev/null | grep "used_memory_human" | cut -d: -f2 | tr -d '\r')
                                if [ -n "$memory_usage" ]; then
                                    echo -e "  ${CYAN}üíæ Memory Usage: $memory_usage${NC}"
                                fi
                            fi
                            ;;
                        "Qdrant Semantic Memory")
                            if command -v curl >/dev/null 2>&1; then
                                local collections_response=$(curl -s "http://$host:$port/collections" 2>/dev/null)
                                if echo "$collections_response" | grep -q "result"; then
                                    local collection_count=$(echo "$collections_response" | grep -o '"name"' | wc -l)
                                    echo -e "  ${CYAN}üìä Collections: $collection_count${NC}"
                                fi
                                
                                local version_info=$(curl -s "http://$host:$port/" 2>/dev/null | grep -o '"version":"[^"]*"' | cut -d'"' -f4)
                                if [ -n "$version_info" ]; then
                                    echo -e "  ${CYAN}üìã Version: Qdrant $version_info${NC}"
                                fi
                            fi
                            ;;
                        "Neo4j Graph Memory")
                            if command -v curl >/dev/null 2>&1; then
                                local http_status=$(curl -s -w "%{http_code}" "http://$host:$port" -o /dev/null 2>/dev/null)
                                if [ "$http_status" = "200" ]; then
                                    echo -e "  ${GREEN}‚úÖ Web Interface: Active${NC}"
                                fi
                                
                                # Try to get version from container
                                if command -v docker >/dev/null 2>&1; then
                                    local neo4j_version=$(docker exec "$container_name" cypher-shell -u neo4j -p kwe_password "CALL dbms.components() YIELD versions RETURN versions[0]" 2>/dev/null | grep -o "[0-9]\+\.[0-9]\+\.[0-9]\+" | head -1)
                                    if [ -n "$neo4j_version" ]; then
                                        echo -e "  ${CYAN}üìã Version: Neo4j $neo4j_version${NC}"
                                    fi
                                fi
                            fi
                            ;;
                    esac
                else
                    echo -e "  ${YELLOW}‚ö†Ô∏è  Network: Not responding on $host:$port${NC}"
                fi
                ;;
            1)
                echo -e "  ${YELLOW}‚ö†Ô∏è  Container: Stopped${NC}"
                echo -e "  ${RED}‚ùå Network: Not accessible${NC}"
                ;;
            2)
                echo -e "  ${RED}‚ùå Container: Not found${NC}"
                echo -e "  ${RED}‚ùå Network: Not accessible${NC}"
                ;;
        esac
    else
        # External service (PostgreSQL)
        echo -e "  ${BLUE}üîó External Service: $host:$port${NC}"
        
        if check_service_connectivity "$service_name" "$host" "$port"; then
            echo -e "  ${GREEN}‚úÖ Network: Reachable${NC}"
            
            # Test database connection
            if command -v python3 >/dev/null 2>&1; then
                python3 -c "
try:
    import psycopg2
    conn = psycopg2.connect(
        host='$host',
        port=$port,
        database='$POSTGRES_DB',
        user='$POSTGRES_USER',
        password='2113'
    )
    cursor = conn.cursor()
    cursor.execute('SELECT version();')
    version = cursor.fetchone()[0]
    conn.close()
    print('  ‚úÖ Database: Connected')
    print(f'  üìã Version: {version.split(\" \")[0]} {version.split(\" \")[1]}')
except Exception as e:
    print(f'  ‚ùå Database: Connection failed ({e})')
" 2>/dev/null
            else
                echo -e "  ${YELLOW}‚ö†Ô∏è  Database: Cannot test (python3 unavailable)${NC}"
            fi
        else
            echo -e "  ${RED}‚ùå Network: Unreachable${NC}"
            echo -e "  ${RED}‚ùå Database: Not accessible${NC}"
        fi
    fi
    
    echo ""
}

# Function to start memory services
start_memory_services() {
    log_message "INFO" "Starting KWE 4-tier memory services..."
    echo -e "${BLUE}üöÄ Starting KWE 4-Tier Memory System${NC}"
    echo "====================================="
    
    if [ ! -f "$SCRIPTS_DIR/start_memory_services.sh" ]; then
        log_message "ERROR" "Start script not found: $SCRIPTS_DIR/start_memory_services.sh"
        echo -e "${RED}‚ùå Start script not found${NC}"
        return 1
    fi
    
    if bash "$SCRIPTS_DIR/start_memory_services.sh"; then
        log_message "INFO" "Memory services started successfully"
        echo -e "${GREEN}‚úÖ Memory services started successfully${NC}"
        return 0
    else
        log_message "ERROR" "Failed to start memory services"
        echo -e "${RED}‚ùå Failed to start memory services${NC}"
        return 1
    fi
}

# Function to stop memory services
stop_memory_services() {
    log_message "INFO" "Stopping KWE memory services..."
    echo -e "${BLUE}üõë Stopping KWE Memory Services${NC}"
    echo "================================"
    
    if [ ! -f "$SCRIPTS_DIR/stop_memory_services.sh" ]; then
        log_message "ERROR" "Stop script not found: $SCRIPTS_DIR/stop_memory_services.sh"
        echo -e "${RED}‚ùå Stop script not found${NC}"
        return 1
    fi
    
    if bash "$SCRIPTS_DIR/stop_memory_services.sh"; then
        log_message "INFO" "Memory services stopped successfully"
        echo -e "${GREEN}‚úÖ Memory services stopped successfully${NC}"
        return 0
    else
        log_message "ERROR" "Failed to stop memory services"
        echo -e "${RED}‚ùå Failed to stop memory services${NC}"
        return 1
    fi
}

# Function to display comprehensive status
display_memory_status() {
    log_message "INFO" "Displaying KWE memory system status..."
    echo -e "${BLUE}üìä KWE 4-Tier Memory System Status${NC}"
    echo "===================================="
    echo ""
    
    # Check each tier
    echo -e "${CYAN}Tier 1: Temporal Memory${NC}"
    get_service_details "PostgreSQL Temporal Memory" "$POSTGRES_HOST" "$POSTGRES_PORT" ""
    
    echo -e "${CYAN}Tier 2: Cache Layer${NC}"
    get_service_details "Redis Cache Layer" "localhost" "$REDIS_PORT" "$REDIS_CONTAINER_NAME"
    
    echo -e "${CYAN}Tier 3: Graph Memory${NC}"
    get_service_details "Neo4j Graph Memory" "localhost" "$NEO4J_HTTP_PORT" "$NEO4J_CONTAINER_NAME"
    
    echo -e "${CYAN}Tier 4: Semantic Memory${NC}"
    get_service_details "Qdrant Semantic Memory" "localhost" "$QDRANT_PORT" "$QDRANT_CONTAINER_NAME"
    
    echo -e "${CYAN}Delta Memory: File System${NC}"
    if [ -d "$DELTA_MEMORY_DIR" ]; then
        local file_count=$(find "$DELTA_MEMORY_DIR" -name "*.json" | wc -l)
        local dir_size=$(du -sh "$DELTA_MEMORY_DIR" 2>/dev/null | cut -f1)
        echo -e "  ${GREEN}‚úÖ Directory: Available${NC}"
        echo -e "  ${CYAN}üìÅ Location: $DELTA_MEMORY_DIR${NC}"
        echo -e "  ${CYAN}üìä Files: $file_count JSON files${NC}"
        echo -e "  ${CYAN}üíæ Size: $dir_size${NC}"
        
        # Check for recent activity
        if [ -f "$DELTA_MEMORY_DIR/last_shutdown.json" ]; then
            local last_shutdown=$(grep "shutdown_timestamp" "$DELTA_MEMORY_DIR/last_shutdown.json" 2>/dev/null | cut -d'"' -f4)
            if [ -n "$last_shutdown" ]; then
                echo -e "  ${CYAN}üïí Last Shutdown: $last_shutdown${NC}"
            fi
        fi
    else
        echo -e "  ${RED}‚ùå Directory: Not found${NC}"
        echo -e "  ${YELLOW}üí° Run: $0 start (to create directory)${NC}"
    fi
    
    echo ""
    
    # Summary
    local healthy_services=0
    local total_services=4
    
    # Count healthy services
    if check_service_connectivity "PostgreSQL" "$POSTGRES_HOST" "$POSTGRES_PORT"; then
        ((healthy_services++))
    fi
    
    if check_container_status "$REDIS_CONTAINER_NAME" && [ $? -eq 0 ] && check_service_connectivity "Redis" "localhost" "$REDIS_PORT"; then
        ((healthy_services++))
    fi
    
    if check_container_status "$NEO4J_CONTAINER_NAME" && [ $? -eq 0 ] && check_service_connectivity "Neo4j" "localhost" "$NEO4J_HTTP_PORT"; then
        ((healthy_services++))
    fi
    
    if check_container_status "$QDRANT_CONTAINER_NAME" && [ $? -eq 0 ] && check_service_connectivity "Qdrant" "localhost" "$QDRANT_PORT"; then
        ((healthy_services++))
    fi
    
    echo -e "${CYAN}System Health Summary:${NC}"
    echo "===================="
    
    if [ $healthy_services -eq $total_services ]; then
        echo -e "${GREEN}‚úÖ All memory tiers operational ($healthy_services/$total_services)${NC}"
        echo -e "${GREEN}üöÄ KWE ready for full operation${NC}"
    elif [ $healthy_services -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Partial operation ($healthy_services/$total_services tiers healthy)${NC}"
        echo -e "${YELLOW}üí° Start services: $0 start${NC}"
    else
        echo -e "${RED}‚ùå No memory tiers operational ($healthy_services/$total_services)${NC}"
        echo -e "${RED}üõ†Ô∏è  Start services: $0 start${NC}"
    fi
    
    echo ""
    echo -e "${CYAN}Integration Endpoints:${NC}"
    echo -e "  PostgreSQL: ${BLUE}postgresql://$POSTGRES_USER:****@$POSTGRES_HOST:$POSTGRES_PORT/$POSTGRES_DB${NC}"
    echo -e "  Redis: ${BLUE}redis://localhost:$REDIS_PORT${NC}"
    echo -e "  Neo4j: ${BLUE}bolt://localhost:$NEO4J_BOLT_PORT${NC} | Web: ${BLUE}http://localhost:$NEO4J_HTTP_PORT${NC}"
    echo -e "  Qdrant: ${BLUE}http://localhost:$QDRANT_PORT${NC}"
    echo -e "  Delta: ${BLUE}$DELTA_MEMORY_DIR${NC}"
    echo ""
}

# Function to reset memory systems (destructive)
reset_memory_systems() {
    log_message "WARN" "Initiating destructive memory system reset..."
    echo -e "${RED}‚ö†Ô∏è  KWE Memory System Reset (DESTRUCTIVE)${NC}"
    echo "=========================================="
    echo ""
    echo -e "${YELLOW}WARNING: This will permanently destroy all data in:${NC}"
    echo -e "${YELLOW}  ‚Ä¢ Redis cache data${NC}"
    echo -e "${YELLOW}  ‚Ä¢ Neo4j graph database${NC}"
    echo -e "${YELLOW}  ‚Ä¢ Qdrant vector collections${NC}"
    echo -e "${YELLOW}  ‚Ä¢ Delta memory files${NC}"
    echo -e "${YELLOW}  ‚Ä¢ PostgreSQL data (if you confirm)${NC}"
    echo ""
    
    # Confirmation prompt
    echo -e "${RED}Type 'RESET' to confirm data destruction:${NC}"
    read -r confirmation
    
    if [ "$confirmation" != "RESET" ]; then
        log_message "INFO" "Memory reset cancelled by user"
        echo -e "${GREEN}‚úÖ Reset cancelled${NC}"
        return 0
    fi
    
    log_message "WARN" "User confirmed memory system reset - proceeding with data destruction"
    echo -e "${RED}üö® Proceeding with destructive reset...${NC}"
    echo ""
    
    # Stop services first
    echo -e "${CYAN}Phase 1: Stopping services...${NC}"
    if bash "$SCRIPTS_DIR/stop_memory_services.sh" --force 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Services stopped${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Service stop completed with warnings${NC}"
    fi
    
    echo ""
    
    # Remove containers and volumes
    echo -e "${CYAN}Phase 2: Destroying local data...${NC}"
    
    # Remove containers
    for container in "$REDIS_CONTAINER_NAME" "$QDRANT_CONTAINER_NAME" "$NEO4J_CONTAINER_NAME"; do
        if check_container_status "$container"; then
            echo -e "${YELLOW}üóëÔ∏è  Removing container: $container${NC}"
            docker rm -f "$container" >/dev/null 2>&1 || true
        fi
    done
    
    # Remove volumes
    local volumes=("kwe_redis_data" "kwe_qdrant_storage" "kwe_neo4j_data" "kwe_neo4j_logs")
    for volume in "${volumes[@]}"; do
        if docker volume ls -q | grep -q "^$volume$"; then
            echo -e "${YELLOW}üóëÔ∏è  Removing volume: $volume${NC}"
            docker volume rm "$volume" >/dev/null 2>&1 || true
        fi
    done
    
    # Remove Delta memory directory
    if [ -d "$DELTA_MEMORY_DIR" ]; then
        echo -e "${YELLOW}üóëÔ∏è  Removing Delta memory: $DELTA_MEMORY_DIR${NC}"
        rm -rf "$DELTA_MEMORY_DIR"
    fi
    
    echo -e "${GREEN}‚úÖ Local data destruction completed${NC}"
    
    echo ""
    
    # PostgreSQL reset (optional)
    echo -e "${CYAN}Phase 3: PostgreSQL reset (optional)...${NC}"
    echo -e "${YELLOW}Reset PostgreSQL database? (y/N):${NC}"
    read -r pg_reset
    
    if [ "$pg_reset" = "y" ] || [ "$pg_reset" = "Y" ]; then
        echo -e "${YELLOW}üóëÔ∏è  Resetting PostgreSQL database...${NC}"
        
        if command -v python3 >/dev/null 2>&1; then
            python3 -c "
try:
    import psycopg2
    conn = psycopg2.connect(
        host='$POSTGRES_HOST',
        port=$POSTGRES_PORT,
        database='$POSTGRES_DB',
        user='$POSTGRES_USER',
        password='2113'
    )
    conn.autocommit = True
    cursor = conn.cursor()
    
    # Get all tables
    cursor.execute(\"SELECT tablename FROM pg_tables WHERE schemaname = 'public'\")
    tables = cursor.fetchall()
    
    # Drop all tables
    for table in tables:
        cursor.execute(f'DROP TABLE IF EXISTS {table[0]} CASCADE')
        print(f'  üóëÔ∏è  Dropped table: {table[0]}')
    
    conn.close()
    print('  ‚úÖ PostgreSQL reset completed')
except Exception as e:
    print(f'  ‚ùå PostgreSQL reset failed: {e}')
" 2>/dev/null
        else
            echo -e "${YELLOW}‚ö†Ô∏è  Cannot reset PostgreSQL (python3 unavailable)${NC}"
        fi
    else
        echo -e "${BLUE}‚ÑπÔ∏è  PostgreSQL reset skipped${NC}"
    fi
    
    echo ""
    
    log_message "WARN" "Memory system reset completed"
    echo -e "${GREEN}üéâ Memory System Reset Completed${NC}"
    echo ""
    echo -e "${CYAN}Next Steps:${NC}"
    echo -e "${CYAN}  1. Start fresh services: $0 start${NC}"
    echo -e "${CYAN}  2. Verify system health: $0 status${NC}"
    echo -e "${CYAN}  3. Run KWE server: ./scripts/start_kwe.sh${NC}"
    echo ""
}

# Function to display action summary
display_action_summary() {
    local action=$1
    local result=$2
    
    echo ""
    echo "====================================="
    if [ $result -eq 0 ]; then
        echo -e "${GREEN}üéâ KWE Memory $action Completed Successfully${NC}"
        echo ""
        echo -e "${CYAN}Memory System Architecture:${NC}"
        echo -e "${CYAN}  Tier 1: PostgreSQL ($POSTGRES_HOST:$POSTGRES_PORT) - Temporal Memory${NC}"
        echo -e "${CYAN}  Tier 2: Redis (localhost:$REDIS_PORT) - Cache Layer${NC}"
        echo -e "${CYAN}  Tier 3: Neo4j (localhost:$NEO4J_HTTP_PORT) - Graph Memory${NC}"
        echo -e "${CYAN}  Tier 4: Qdrant (localhost:$QDRANT_PORT) - Semantic Memory${NC}"
        echo -e "${CYAN}  Delta: File System ($DELTA_MEMORY_DIR) - Pattern Storage${NC}"
    else
        echo -e "${RED}‚ùå KWE Memory $action Failed${NC}"
        echo ""
        echo -e "${YELLOW}üí° Troubleshooting:${NC}"
        echo -e "${YELLOW}  1. Check logs: $MEMORY_LOG_FILE${NC}"
        echo -e "${YELLOW}  2. Verify Docker: docker info${NC}"
        echo -e "${YELLOW}  3. Check dependencies: ./scripts/check_dependencies.sh${NC}"
        echo -e "${YELLOW}  4. Manual status: $0 status${NC}"
    fi
    echo ""
}

# Main execution
main() {
    local action="${1:-${ACTION:-$DEFAULT_ACTION}}"
    
    # Validate arguments
    case "$action" in
        start|stop|status|reset)
            ;;
        -h|--help)
            display_usage
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Invalid action: $action${NC}"
            echo -e "${YELLOW}Valid options: start, stop, status, reset${NC}"
            display_usage
            exit 1
            ;;
    esac
    
    echo -e "${BLUE}üß† KWE Memory Management System${NC}"
    echo "==============================="
    echo -e "${CYAN}Action: $action${NC}"
    echo ""
    
    # Setup logging
    mkdir -p "$LOG_DIR"
    log_message "INFO" "Starting KWE memory management: $action"
    
    # Check service scripts (except for status-only operations)
    if [ "$action" != "status" ]; then
        if ! check_service_scripts; then
            exit 1
        fi
    fi
    
    # Execute action
    local action_result=0
    case "$action" in
        start)
            start_memory_services || action_result=1
            ;;
        stop)
            stop_memory_services || action_result=1
            ;;
        status)
            display_memory_status || action_result=1
            ;;
        reset)
            reset_memory_systems || action_result=1
            ;;
    esac
    
    # Display summary (except for status which has its own format)
    if [ "$action" != "status" ]; then
        display_action_summary "$action" "$action_result"
    fi
    
    exit $action_result
}

# Run main function
main "$@"