version: '3.8'
services:
  ltmc-server:
    build:
      context: .
      dockerfile: Dockerfile.production
      target: production
    restart: unless-stopped
    ports:
    - 8000:8000
    environment:
    - REDIS_URL=redis://redis:6379/0
    - NEO4J_URI=bolt://neo4j:7687
    - POSTGRES_URL=postgresql://postgres:5432/ltmc
    - ENVIRONMENT=production
    volumes:
    - ./data:/app/data:rw
    - ./logs:/app/logs:rw
    networks:
    - ltmc-network
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test:
      - CMD
      - python
      - healthcheck.py
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2Gi
          cpus: '2.0'
        reservations:
          memory: 1Gi
          cpus: '1.0'
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
    - redis-data:/data
    networks:
    - ltmc-network
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 10s
      timeout: 5s
      retries: 3
  neo4j:
    image: neo4j:5-community
    restart: unless-stopped
    environment:
    - NEO4J_AUTH=neo4j/ltmc-password-2024
    - NEO4J_PLUGINS=["apoc"]
    volumes:
    - neo4j-data:/data
    - neo4j-logs:/logs
    networks:
    - ltmc-network
    healthcheck:
      test:
      - CMD
      - cypher-shell
      - -u
      - neo4j
      - -p
      - ltmc-password-2024
      - RETURN 1
      interval: 30s
      timeout: 10s
      retries: 3
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
    - POSTGRES_DB=ltmc
    - POSTGRES_USER=ltmc
    - POSTGRES_PASSWORD=ltmc-password-2024
    volumes:
    - postgres-data:/var/lib/postgresql/data
    networks:
    - ltmc-network
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U ltmc
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  redis-data: {}
  neo4j-data: {}
  neo4j-logs: {}
  postgres-data: {}
networks:
  ltmc-network:
    driver: bridge
