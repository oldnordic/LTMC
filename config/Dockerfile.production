# syntax=docker/dockerfile:1

# Multi-stage Dockerfile for LTMC MCP Server Production Deployment
# Based on Docker best practices from Context7 research

# Build stage - Install dependencies and build application
FROM python:3.11-slim AS builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy dependency files first for optimal layer caching
COPY requirements.txt pyproject.toml ./

# Install Python dependencies
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --no-compile --user -r requirements.txt

# Production stage - Minimal runtime image
FROM python:3.11-slim AS production

# Create non-root user for security
RUN groupadd -r ltmc && useradd --no-log-init -r -g ltmc ltmc

# Install only runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get autoremove -y \
    && apt-get clean

# Copy Python packages from builder
COPY --from=builder /root/.local /home/ltmc/.local

# Set up application directory
WORKDIR /app
RUN chown -R ltmc:ltmc /app

# Copy application code
COPY --chown=ltmc:ltmc . .

# Copy health check script
COPY --chown=ltmc:ltmc healthcheck.py ./

# Switch to non-root user
USER ltmc

# Set environment variables
ENV PATH="/home/ltmc/.local/bin:$PATH"
ENV PYTHONPATH="/app:$PYTHONPATH"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Expose port
EXPOSE 8000

# Health check using custom script
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python healthcheck.py

# Use optimized stdio wrapper for <500ms startup
ENTRYPOINT ["python", "ltmc_stdio_wrapper.py"]
